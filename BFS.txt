#include<iostream>
#include<vector>
#include<queue>
#include<omp.h>
using namespace std;

void bfs(vector<vector<int>> graph, int src, vector<bool> visited)
{
    queue<int> q;
    visited[src] = true;
    q.push(src);
    while(!q.empty()){
        int vertex = q.front();
        q.pop();
        cout<<vertex<<" ";
        #pragma omp parallel for
        for(int i=0; i<graph[vertex].size(); i++)
        {
            int neighbor = graph[vertex][i];
            if(!visited[neighbor]){
                q.push(neighbor);
                visited[neighbor] = true;
            }
        } 
    }
}

int main()
{
    int n_vertices;
    cout<<"No.of vertices: ";
    cin>>n_vertices;

    int n_edges;
    cout<<"No.of edges: ";
    cin>>n_edges;

    vector<vector<int>> graph(n_vertices);
    cout<<"Enter edges (src - dest): ";
    for(int i=0; i<n_edges; i++){
        int src, dest;
        cin>>src>>dest;
        graph[src].push_back(dest);
        graph[dest].push_back(src);
    }

    int src;
    cout<<"Enter source vertex: ";
    cin>>src;

    vector<bool> visited(n_vertices, false);

    cout<<"BFS Traversal: ";
    double start = omp_get_wtime();
    bfs(graph, src, visited);
    double end = omp_get_wtime();
    cout<<endl<<"Time taken: "<<end - start<<" seconds.";
}


To compile file use command-
g++ -o filename –fopenmp filename.cpp
 Run file using command-
./filename


Breadth-First Search (BFS):

threads" in OpenMP refer to the units of execution within a parallelized program that run concurrently to perform computations in parallel. 

    BFS explores all the neighboring nodes at the present depth before moving on to nodes at the next depth level.
    It starts at a specified node (often called the "source" or "root" node) and explores all of its neighbors before moving on to their neighbors.
    BFS is commonly implemented using a queue data structure to keep track of the nodes to be visited.
    It is used to find the shortest path in unweighted graphs, detect cycles in graphs, and solve puzzles like the shortest path in a maze.


Certainly! Your code is an implementation of parallel breadth-first search (BFS) using OpenMP in C++. Here's a brief explanation:

    Header Includes:
        You include necessary header files for input-output operations (iostream) and working with dynamic arrays (vector).

    OpenMP Header Include:
        You include the OpenMP header file (#include <omp.h>) for utilizing OpenMP functionalities for parallelization.

    Namespace Declaration:
        You use the std namespace for convenience, allowing you to use standard C++ library functions without specifying the namespace each time.

    Function Definitions:
        You define a function bfs to perform a BFS traversal of a graph. It takes the graph, source vertex, and a vector to keep track of visited vertices.

    BFS Traversal:
        Inside the bfs function, you initialize a queue and mark the source vertex as visited.
        You perform a standard BFS traversal using a queue, visiting each vertex and marking its neighbors as visited.
        OpenMP is used to parallelize the loop that iterates over the neighbors of the current vertex. This allows multiple threads to explore different branches of the graph simultaneously.

    Main Function:
        In the main function, you take input for the number of vertices and edges, and the edges of the graph.
        You also take input for the source vertex for the BFS traversal.
        After initializing the visited vector, you call the bfs function to perform the traversal.
        You measure the time taken for the traversal using OpenMP's timing functions (omp_get_wtime()).

Overall, your code utilizes OpenMP to parallelize the BFS traversal, potentially improving performance by utilizing multiple CPU cores. However, there are some issues in passing parameters to functions (bfs) and potential race conditions when modifying the visited vector in parallel, which should be addressed for correctness and efficiency.

OUTPUT:
no of vertices:5
no of edges:5 
enter edges:0 1
0 2
1 3
1 4
2 4
source vertex:0
