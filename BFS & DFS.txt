#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Function to perform Depth First Search
void dfs(int vertex, vector<vector<int>>& graph, vector<bool>& visited) {
    visited[vertex] = true;
    cout << vertex << " ";

    #pragma omp parallel for
    for (int i = 0; i < graph[vertex].size(); ++i) {
        int neighbor = graph[vertex][i];
        if (!visited[neighbor]) {
            dfs(neighbor, graph, visited);
        }
    }
}

// Function to perform Breadth First Search
void bfs(int source, vector<vector<int>>& graph, vector<bool>& visited) {
    queue<int> q;
    visited[source] = true;
    q.push(source);

    while (!q.empty()) {
        int vertex = q.front();
        q.pop();
        cout << vertex << " ";

        #pragma omp parallel for
        for (int i = 0; i < graph[vertex].size(); ++i) {
            int neighbor = graph[vertex][i];
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    int num_vertices, num_edges, source_vertex;
    cout << "Enter the number of vertices: ";
    cin >> num_vertices;
    cout << "Enter the number of edges: ";
    cin >> num_edges;

    // Initialize the graph
    vector<vector<int>> graph(num_vertices);
    cout << "Enter edges (source destination):" << endl;
    for (int i = 0; i < num_edges; ++i) {
        int src, dest;
        cin >> src >> dest;
        graph[src].push_back(dest);
        graph[dest].push_back(src); // Assuming undirected graph
    }

    cout << "Enter the source vertex: ";
    cin >> source_vertex;

    // Initialize visited array for both algorithms
    vector<bool> visited(num_vertices, false);

    cout << "DFS traversal: ";
    dfs(source_vertex, graph, visited);
    cout << endl;

    // Reset visited array
    fill(visited.begin(), visited.end(), false);

    cout << "BFS traversal: ";
    bfs(source_vertex, graph, visited);
    cout << endl;

    return 0;
}


To compile file use command-
g++ -o filename –fopenmp filename.cpp
 Run file using command-
./filename


OUTPUT:
no of vertices:5
no of edges:5 
enter edges:0 1
0 2
1 3
1 4
2 4
source vertex:0
